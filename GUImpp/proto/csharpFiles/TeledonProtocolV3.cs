// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: TeledonProtobuff.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Teledon.Client {

  /// <summary>Holder for reflection information generated from TeledonProtobuff.proto</summary>
  public static partial class TeledonProtobuffReflection {

    #region Descriptor
    /// <summary>File descriptor for TeledonProtobuff.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TeledonProtobuffReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZUZWxlZG9uUHJvdG9idWZmLnByb3RvEg50ZWxlZG9uLmNsaWVudCI6CghW",
            "b2x1bnRhchIQCgh1c2VybmFtZRgBIAEoCRIQCghwYXNzd29yZBgCIAEoCRIK",
            "CgJpZBgDIAEoAyI9CgxDYXpDYXJpdGFiaWwSDAoEbnVtZRgBIAEoCRITCgtz",
            "dW1hQWR1bmF0YRgCIAEoBRIKCgJpZBgDIAEoAyJVCgdEb25hdG9yEgwKBG51",
            "bWUYASABKAkSDwoHdGVsZWZvbhgCIAEoCRIPCgdwcmVudW1lGAMgASgJEg4K",
            "BmFkcmVzYRgEIAEoCRIKCgJpZBgFIAEoAyJ4CgdEb25hdGllEigKB2RvbmF0",
            "b3IYASABKAsyFy50ZWxlZG9uLmNsaWVudC5Eb25hdG9yEikKA2NhehgCIAEo",
            "CzIcLnRlbGVkb24uY2xpZW50LkNhekNhcml0YWJpbBIMCgRzdW1hGAMgASgF",
            "EgoKAmlkGAQgASgDIugCCg5UZWxlZG9uUmVxdWVzdBIxCgR0eXBlGAEgASgO",
            "MiMudGVsZWRvbi5jbGllbnQuVGVsZWRvblJlcXVlc3QuVHlwZRIsCgh2b2x1",
            "bnRhchgCIAEoCzIYLnRlbGVkb24uY2xpZW50LlZvbHVudGFySAASKgoHZG9u",
            "YXRvchgDIAEoCzIXLnRlbGVkb24uY2xpZW50LkRvbmF0b3JIABIrCgNjYXoY",
            "BCABKAsyHC50ZWxlZG9uLmNsaWVudC5DYXpDYXJpdGFiaWxIABIqCgdkb25h",
            "dGllGAUgASgLMhcudGVsZWRvbi5jbGllbnQuRG9uYXRpZUgAImUKBFR5cGUS",
            "CwoHVU5LTk9XThAAEgkKBUxPR0lOEAESCgoGTE9HT1VUEAISFAoQR0VUX0FM",
            "TF9ET05BVE9SSRADEhIKDkdFVF9BTExfQ0FaVVJJEAQSDwoLTkVXX0RPTkFU",
            "SUUQBUIJCgdwYXlsb2FkIroCCg9UZWxlZG9uUmVzcG9uc2USMgoEdHlwZRgB",
            "IAEoDjIkLnRlbGVkb24uY2xpZW50LlRlbGVkb25SZXNwb25zZS5UeXBlEg0K",
            "BWVycm9yGAIgASgJEiwKBmNhenVyaRgDIAMoCzIcLnRlbGVkb24uY2xpZW50",
            "LkNhekNhcml0YWJpbBIoCgdkb25hdGllGAQgASgLMhcudGVsZWRvbi5jbGll",
            "bnQuRG9uYXRpZRIpCghkb25hdG9yaRgFIAMoCzIXLnRlbGVkb24uY2xpZW50",
            "LkRvbmF0b3IiYQoEVHlwZRILCgdVbmtub3duEAASBgoCT0sQARIJCgVFUlJP",
            "UhACEhIKDkdFVF9BTExfQ0FaVVJJEAMSDwoLTkVXX0RPTkFUSUUQBBIUChBH",
            "RVRfQUxMX0RPTkFUT1JJEAVCNQohdGVsZWRvbi5uZXR3b3JrLnByb3RvYnVm",
            "ZnByb3RvY29sQhBUZWxlZG9uUHJvdG9idWZzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Teledon.Client.Voluntar), global::Teledon.Client.Voluntar.Parser, new[]{ "Username", "Password", "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Teledon.Client.CazCaritabil), global::Teledon.Client.CazCaritabil.Parser, new[]{ "Nume", "SumaAdunata", "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Teledon.Client.Donator), global::Teledon.Client.Donator.Parser, new[]{ "Nume", "Telefon", "Prenume", "Adresa", "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Teledon.Client.Donatie), global::Teledon.Client.Donatie.Parser, new[]{ "Donator", "Caz", "Suma", "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Teledon.Client.TeledonRequest), global::Teledon.Client.TeledonRequest.Parser, new[]{ "Type", "Voluntar", "Donator", "Caz", "Donatie" }, new[]{ "Payload" }, new[]{ typeof(global::Teledon.Client.TeledonRequest.Types.Type) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Teledon.Client.TeledonResponse), global::Teledon.Client.TeledonResponse.Parser, new[]{ "Type", "Error", "Cazuri", "Donatie", "Donatori" }, null, new[]{ typeof(global::Teledon.Client.TeledonResponse.Types.Type) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Voluntar : pb::IMessage<Voluntar> {
    private static readonly pb::MessageParser<Voluntar> _parser = new pb::MessageParser<Voluntar>(() => new Voluntar());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Voluntar> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Teledon.Client.TeledonProtobuffReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Voluntar() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Voluntar(Voluntar other) : this() {
      username_ = other.username_;
      password_ = other.password_;
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Voluntar Clone() {
      return new Voluntar(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 3;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Voluntar);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Voluntar other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if (Password != other.Password) return false;
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Username.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (Id != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Voluntar other) {
      if (other == null) {
        return;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 24: {
            Id = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CazCaritabil : pb::IMessage<CazCaritabil> {
    private static readonly pb::MessageParser<CazCaritabil> _parser = new pb::MessageParser<CazCaritabil>(() => new CazCaritabil());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CazCaritabil> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Teledon.Client.TeledonProtobuffReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CazCaritabil() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CazCaritabil(CazCaritabil other) : this() {
      nume_ = other.nume_;
      sumaAdunata_ = other.sumaAdunata_;
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CazCaritabil Clone() {
      return new CazCaritabil(this);
    }

    /// <summary>Field number for the "nume" field.</summary>
    public const int NumeFieldNumber = 1;
    private string nume_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nume {
      get { return nume_; }
      set {
        nume_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sumaAdunata" field.</summary>
    public const int SumaAdunataFieldNumber = 2;
    private int sumaAdunata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SumaAdunata {
      get { return sumaAdunata_; }
      set {
        sumaAdunata_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 3;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CazCaritabil);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CazCaritabil other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Nume != other.Nume) return false;
      if (SumaAdunata != other.SumaAdunata) return false;
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Nume.Length != 0) hash ^= Nume.GetHashCode();
      if (SumaAdunata != 0) hash ^= SumaAdunata.GetHashCode();
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Nume.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Nume);
      }
      if (SumaAdunata != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SumaAdunata);
      }
      if (Id != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Nume.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nume);
      }
      if (SumaAdunata != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SumaAdunata);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CazCaritabil other) {
      if (other == null) {
        return;
      }
      if (other.Nume.Length != 0) {
        Nume = other.Nume;
      }
      if (other.SumaAdunata != 0) {
        SumaAdunata = other.SumaAdunata;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Nume = input.ReadString();
            break;
          }
          case 16: {
            SumaAdunata = input.ReadInt32();
            break;
          }
          case 24: {
            Id = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Donator : pb::IMessage<Donator> {
    private static readonly pb::MessageParser<Donator> _parser = new pb::MessageParser<Donator>(() => new Donator());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Donator> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Teledon.Client.TeledonProtobuffReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Donator() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Donator(Donator other) : this() {
      nume_ = other.nume_;
      telefon_ = other.telefon_;
      prenume_ = other.prenume_;
      adresa_ = other.adresa_;
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Donator Clone() {
      return new Donator(this);
    }

    /// <summary>Field number for the "nume" field.</summary>
    public const int NumeFieldNumber = 1;
    private string nume_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nume {
      get { return nume_; }
      set {
        nume_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "telefon" field.</summary>
    public const int TelefonFieldNumber = 2;
    private string telefon_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Telefon {
      get { return telefon_; }
      set {
        telefon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "prenume" field.</summary>
    public const int PrenumeFieldNumber = 3;
    private string prenume_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Prenume {
      get { return prenume_; }
      set {
        prenume_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "adresa" field.</summary>
    public const int AdresaFieldNumber = 4;
    private string adresa_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Adresa {
      get { return adresa_; }
      set {
        adresa_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 5;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Donator);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Donator other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Nume != other.Nume) return false;
      if (Telefon != other.Telefon) return false;
      if (Prenume != other.Prenume) return false;
      if (Adresa != other.Adresa) return false;
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Nume.Length != 0) hash ^= Nume.GetHashCode();
      if (Telefon.Length != 0) hash ^= Telefon.GetHashCode();
      if (Prenume.Length != 0) hash ^= Prenume.GetHashCode();
      if (Adresa.Length != 0) hash ^= Adresa.GetHashCode();
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Nume.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Nume);
      }
      if (Telefon.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Telefon);
      }
      if (Prenume.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Prenume);
      }
      if (Adresa.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Adresa);
      }
      if (Id != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Nume.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Nume);
      }
      if (Telefon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Telefon);
      }
      if (Prenume.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Prenume);
      }
      if (Adresa.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Adresa);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Donator other) {
      if (other == null) {
        return;
      }
      if (other.Nume.Length != 0) {
        Nume = other.Nume;
      }
      if (other.Telefon.Length != 0) {
        Telefon = other.Telefon;
      }
      if (other.Prenume.Length != 0) {
        Prenume = other.Prenume;
      }
      if (other.Adresa.Length != 0) {
        Adresa = other.Adresa;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Nume = input.ReadString();
            break;
          }
          case 18: {
            Telefon = input.ReadString();
            break;
          }
          case 26: {
            Prenume = input.ReadString();
            break;
          }
          case 34: {
            Adresa = input.ReadString();
            break;
          }
          case 40: {
            Id = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Donatie : pb::IMessage<Donatie> {
    private static readonly pb::MessageParser<Donatie> _parser = new pb::MessageParser<Donatie>(() => new Donatie());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Donatie> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Teledon.Client.TeledonProtobuffReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Donatie() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Donatie(Donatie other) : this() {
      donator_ = other.donator_ != null ? other.donator_.Clone() : null;
      caz_ = other.caz_ != null ? other.caz_.Clone() : null;
      suma_ = other.suma_;
      id_ = other.id_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Donatie Clone() {
      return new Donatie(this);
    }

    /// <summary>Field number for the "donator" field.</summary>
    public const int DonatorFieldNumber = 1;
    private global::Teledon.Client.Donator donator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Teledon.Client.Donator Donator {
      get { return donator_; }
      set {
        donator_ = value;
      }
    }

    /// <summary>Field number for the "caz" field.</summary>
    public const int CazFieldNumber = 2;
    private global::Teledon.Client.CazCaritabil caz_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Teledon.Client.CazCaritabil Caz {
      get { return caz_; }
      set {
        caz_ = value;
      }
    }

    /// <summary>Field number for the "suma" field.</summary>
    public const int SumaFieldNumber = 3;
    private int suma_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Suma {
      get { return suma_; }
      set {
        suma_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 4;
    private long id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Donatie);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Donatie other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Donator, other.Donator)) return false;
      if (!object.Equals(Caz, other.Caz)) return false;
      if (Suma != other.Suma) return false;
      if (Id != other.Id) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (donator_ != null) hash ^= Donator.GetHashCode();
      if (caz_ != null) hash ^= Caz.GetHashCode();
      if (Suma != 0) hash ^= Suma.GetHashCode();
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (donator_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Donator);
      }
      if (caz_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Caz);
      }
      if (Suma != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Suma);
      }
      if (Id != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Id);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (donator_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Donator);
      }
      if (caz_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Caz);
      }
      if (Suma != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Suma);
      }
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Donatie other) {
      if (other == null) {
        return;
      }
      if (other.donator_ != null) {
        if (donator_ == null) {
          Donator = new global::Teledon.Client.Donator();
        }
        Donator.MergeFrom(other.Donator);
      }
      if (other.caz_ != null) {
        if (caz_ == null) {
          Caz = new global::Teledon.Client.CazCaritabil();
        }
        Caz.MergeFrom(other.Caz);
      }
      if (other.Suma != 0) {
        Suma = other.Suma;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (donator_ == null) {
              Donator = new global::Teledon.Client.Donator();
            }
            input.ReadMessage(Donator);
            break;
          }
          case 18: {
            if (caz_ == null) {
              Caz = new global::Teledon.Client.CazCaritabil();
            }
            input.ReadMessage(Caz);
            break;
          }
          case 24: {
            Suma = input.ReadInt32();
            break;
          }
          case 32: {
            Id = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TeledonRequest : pb::IMessage<TeledonRequest> {
    private static readonly pb::MessageParser<TeledonRequest> _parser = new pb::MessageParser<TeledonRequest>(() => new TeledonRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeledonRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Teledon.Client.TeledonProtobuffReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeledonRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeledonRequest(TeledonRequest other) : this() {
      type_ = other.type_;
      switch (other.PayloadCase) {
        case PayloadOneofCase.Voluntar:
          Voluntar = other.Voluntar.Clone();
          break;
        case PayloadOneofCase.Donator:
          Donator = other.Donator.Clone();
          break;
        case PayloadOneofCase.Caz:
          Caz = other.Caz.Clone();
          break;
        case PayloadOneofCase.Donatie:
          Donatie = other.Donatie.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeledonRequest Clone() {
      return new TeledonRequest(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Teledon.Client.TeledonRequest.Types.Type type_ = global::Teledon.Client.TeledonRequest.Types.Type.Unknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Teledon.Client.TeledonRequest.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "voluntar" field.</summary>
    public const int VoluntarFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Teledon.Client.Voluntar Voluntar {
      get { return payloadCase_ == PayloadOneofCase.Voluntar ? (global::Teledon.Client.Voluntar) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Voluntar;
      }
    }

    /// <summary>Field number for the "donator" field.</summary>
    public const int DonatorFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Teledon.Client.Donator Donator {
      get { return payloadCase_ == PayloadOneofCase.Donator ? (global::Teledon.Client.Donator) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Donator;
      }
    }

    /// <summary>Field number for the "caz" field.</summary>
    public const int CazFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Teledon.Client.CazCaritabil Caz {
      get { return payloadCase_ == PayloadOneofCase.Caz ? (global::Teledon.Client.CazCaritabil) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Caz;
      }
    }

    /// <summary>Field number for the "donatie" field.</summary>
    public const int DonatieFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Teledon.Client.Donatie Donatie {
      get { return payloadCase_ == PayloadOneofCase.Donatie ? (global::Teledon.Client.Donatie) payload_ : null; }
      set {
        payload_ = value;
        payloadCase_ = value == null ? PayloadOneofCase.None : PayloadOneofCase.Donatie;
      }
    }

    private object payload_;
    /// <summary>Enum of possible cases for the "payload" oneof.</summary>
    public enum PayloadOneofCase {
      None = 0,
      Voluntar = 2,
      Donator = 3,
      Caz = 4,
      Donatie = 5,
    }
    private PayloadOneofCase payloadCase_ = PayloadOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PayloadOneofCase PayloadCase {
      get { return payloadCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPayload() {
      payloadCase_ = PayloadOneofCase.None;
      payload_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeledonRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeledonRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(Voluntar, other.Voluntar)) return false;
      if (!object.Equals(Donator, other.Donator)) return false;
      if (!object.Equals(Caz, other.Caz)) return false;
      if (!object.Equals(Donatie, other.Donatie)) return false;
      if (PayloadCase != other.PayloadCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::Teledon.Client.TeledonRequest.Types.Type.Unknown) hash ^= Type.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Voluntar) hash ^= Voluntar.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Donator) hash ^= Donator.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Caz) hash ^= Caz.GetHashCode();
      if (payloadCase_ == PayloadOneofCase.Donatie) hash ^= Donatie.GetHashCode();
      hash ^= (int) payloadCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != global::Teledon.Client.TeledonRequest.Types.Type.Unknown) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (payloadCase_ == PayloadOneofCase.Voluntar) {
        output.WriteRawTag(18);
        output.WriteMessage(Voluntar);
      }
      if (payloadCase_ == PayloadOneofCase.Donator) {
        output.WriteRawTag(26);
        output.WriteMessage(Donator);
      }
      if (payloadCase_ == PayloadOneofCase.Caz) {
        output.WriteRawTag(34);
        output.WriteMessage(Caz);
      }
      if (payloadCase_ == PayloadOneofCase.Donatie) {
        output.WriteRawTag(42);
        output.WriteMessage(Donatie);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::Teledon.Client.TeledonRequest.Types.Type.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (payloadCase_ == PayloadOneofCase.Voluntar) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Voluntar);
      }
      if (payloadCase_ == PayloadOneofCase.Donator) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Donator);
      }
      if (payloadCase_ == PayloadOneofCase.Caz) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Caz);
      }
      if (payloadCase_ == PayloadOneofCase.Donatie) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Donatie);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeledonRequest other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::Teledon.Client.TeledonRequest.Types.Type.Unknown) {
        Type = other.Type;
      }
      switch (other.PayloadCase) {
        case PayloadOneofCase.Voluntar:
          if (Voluntar == null) {
            Voluntar = new global::Teledon.Client.Voluntar();
          }
          Voluntar.MergeFrom(other.Voluntar);
          break;
        case PayloadOneofCase.Donator:
          if (Donator == null) {
            Donator = new global::Teledon.Client.Donator();
          }
          Donator.MergeFrom(other.Donator);
          break;
        case PayloadOneofCase.Caz:
          if (Caz == null) {
            Caz = new global::Teledon.Client.CazCaritabil();
          }
          Caz.MergeFrom(other.Caz);
          break;
        case PayloadOneofCase.Donatie:
          if (Donatie == null) {
            Donatie = new global::Teledon.Client.Donatie();
          }
          Donatie.MergeFrom(other.Donatie);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Teledon.Client.TeledonRequest.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            global::Teledon.Client.Voluntar subBuilder = new global::Teledon.Client.Voluntar();
            if (payloadCase_ == PayloadOneofCase.Voluntar) {
              subBuilder.MergeFrom(Voluntar);
            }
            input.ReadMessage(subBuilder);
            Voluntar = subBuilder;
            break;
          }
          case 26: {
            global::Teledon.Client.Donator subBuilder = new global::Teledon.Client.Donator();
            if (payloadCase_ == PayloadOneofCase.Donator) {
              subBuilder.MergeFrom(Donator);
            }
            input.ReadMessage(subBuilder);
            Donator = subBuilder;
            break;
          }
          case 34: {
            global::Teledon.Client.CazCaritabil subBuilder = new global::Teledon.Client.CazCaritabil();
            if (payloadCase_ == PayloadOneofCase.Caz) {
              subBuilder.MergeFrom(Caz);
            }
            input.ReadMessage(subBuilder);
            Caz = subBuilder;
            break;
          }
          case 42: {
            global::Teledon.Client.Donatie subBuilder = new global::Teledon.Client.Donatie();
            if (payloadCase_ == PayloadOneofCase.Donatie) {
              subBuilder.MergeFrom(Donatie);
            }
            input.ReadMessage(subBuilder);
            Donatie = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TeledonRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("LOGIN")] Login = 1,
        [pbr::OriginalName("LOGOUT")] Logout = 2,
        [pbr::OriginalName("GET_ALL_DONATORI")] GetAllDonatori = 3,
        [pbr::OriginalName("GET_ALL_CAZURI")] GetAllCazuri = 4,
        [pbr::OriginalName("NEW_DONATIE")] NewDonatie = 5,
      }

    }
    #endregion

  }

  public sealed partial class TeledonResponse : pb::IMessage<TeledonResponse> {
    private static readonly pb::MessageParser<TeledonResponse> _parser = new pb::MessageParser<TeledonResponse>(() => new TeledonResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TeledonResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Teledon.Client.TeledonProtobuffReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeledonResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeledonResponse(TeledonResponse other) : this() {
      type_ = other.type_;
      error_ = other.error_;
      cazuri_ = other.cazuri_.Clone();
      donatie_ = other.donatie_ != null ? other.donatie_.Clone() : null;
      donatori_ = other.donatori_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TeledonResponse Clone() {
      return new TeledonResponse(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Teledon.Client.TeledonResponse.Types.Type type_ = global::Teledon.Client.TeledonResponse.Types.Type.Unknown;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Teledon.Client.TeledonResponse.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 2;
    private string error_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Error {
      get { return error_; }
      set {
        error_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cazuri" field.</summary>
    public const int CazuriFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Teledon.Client.CazCaritabil> _repeated_cazuri_codec
        = pb::FieldCodec.ForMessage(26, global::Teledon.Client.CazCaritabil.Parser);
    private readonly pbc::RepeatedField<global::Teledon.Client.CazCaritabil> cazuri_ = new pbc::RepeatedField<global::Teledon.Client.CazCaritabil>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Teledon.Client.CazCaritabil> Cazuri {
      get { return cazuri_; }
    }

    /// <summary>Field number for the "donatie" field.</summary>
    public const int DonatieFieldNumber = 4;
    private global::Teledon.Client.Donatie donatie_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Teledon.Client.Donatie Donatie {
      get { return donatie_; }
      set {
        donatie_ = value;
      }
    }

    /// <summary>Field number for the "donatori" field.</summary>
    public const int DonatoriFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Teledon.Client.Donator> _repeated_donatori_codec
        = pb::FieldCodec.ForMessage(42, global::Teledon.Client.Donator.Parser);
    private readonly pbc::RepeatedField<global::Teledon.Client.Donator> donatori_ = new pbc::RepeatedField<global::Teledon.Client.Donator>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Teledon.Client.Donator> Donatori {
      get { return donatori_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TeledonResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TeledonResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Error != other.Error) return false;
      if(!cazuri_.Equals(other.cazuri_)) return false;
      if (!object.Equals(Donatie, other.Donatie)) return false;
      if(!donatori_.Equals(other.donatori_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::Teledon.Client.TeledonResponse.Types.Type.Unknown) hash ^= Type.GetHashCode();
      if (Error.Length != 0) hash ^= Error.GetHashCode();
      hash ^= cazuri_.GetHashCode();
      if (donatie_ != null) hash ^= Donatie.GetHashCode();
      hash ^= donatori_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != global::Teledon.Client.TeledonResponse.Types.Type.Unknown) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Error.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Error);
      }
      cazuri_.WriteTo(output, _repeated_cazuri_codec);
      if (donatie_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Donatie);
      }
      donatori_.WriteTo(output, _repeated_donatori_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::Teledon.Client.TeledonResponse.Types.Type.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Error.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Error);
      }
      size += cazuri_.CalculateSize(_repeated_cazuri_codec);
      if (donatie_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Donatie);
      }
      size += donatori_.CalculateSize(_repeated_donatori_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TeledonResponse other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::Teledon.Client.TeledonResponse.Types.Type.Unknown) {
        Type = other.Type;
      }
      if (other.Error.Length != 0) {
        Error = other.Error;
      }
      cazuri_.Add(other.cazuri_);
      if (other.donatie_ != null) {
        if (donatie_ == null) {
          Donatie = new global::Teledon.Client.Donatie();
        }
        Donatie.MergeFrom(other.Donatie);
      }
      donatori_.Add(other.donatori_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Teledon.Client.TeledonResponse.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            Error = input.ReadString();
            break;
          }
          case 26: {
            cazuri_.AddEntriesFrom(input, _repeated_cazuri_codec);
            break;
          }
          case 34: {
            if (donatie_ == null) {
              Donatie = new global::Teledon.Client.Donatie();
            }
            input.ReadMessage(Donatie);
            break;
          }
          case 42: {
            donatori_.AddEntriesFrom(input, _repeated_donatori_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TeledonResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("Unknown")] Unknown = 0,
        [pbr::OriginalName("OK")] Ok = 1,
        [pbr::OriginalName("ERROR")] Error = 2,
        [pbr::OriginalName("GET_ALL_CAZURI")] GetAllCazuri = 3,
        [pbr::OriginalName("NEW_DONATIE")] NewDonatie = 4,
        [pbr::OriginalName("GET_ALL_DONATORI")] GetAllDonatori = 5,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
